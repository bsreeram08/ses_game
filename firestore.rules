rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to get a document safely
    function getDoc(path) {
      return get(/databases/$(database)/documents/$(path));
    }
    
    // User profiles - allow users to read any profile but only write to their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Games - allow authenticated users to create, read, and update games
    match /games/{gameId} {
      // Allow any authenticated user to read games
      allow read: if request.auth != null;
      
      // Allow any authenticated user to create games
      allow create: if request.auth != null;
      
      // For now, allow any authenticated user to update games
      // This is a simplified rule to ensure functionality
      allow update: if request.auth != null;
      
      // Only allow deletion by the host
      allow delete: if request.auth != null && 
        resource.data.hostId == request.auth.uid;
    }
    
    // Invite codes - allow authenticated users to read and create
    match /inviteCodes/{code} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      
      // Allow deletion by the host of the associated game
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/inviteCodes/$(code)) && 
        exists(/databases/$(database)/documents/games/$(resource.data.gameId)) &&
        getDoc('games/' + resource.data.gameId).data.hostId == request.auth.uid;
    }
    
    // Cards, decks, and other game resources
    match /{collection}/{docId} {
      // Allow read access to game resources for authenticated users
      allow read: if request.auth != null && 
        (collection == 'cards' || collection == 'decks' || collection == 'cardPacks');
    }
  }
}
